#!/bin/bash

# Created on {{ ansible_date_time.iso8601 }}
# Pushed to: {{  inventory_hostname }}

export JAVA_HOME="$(dirname $(dirname $(readlink -f $(which javac))))"

# Hadoop
export HADOOP_HOME={{ stack_root }}/hadoop-latest
export HADOOP_YARN_HOME={{ stack_root }}/hadoop-latest
export HADOOP_CONF_DIR={{ hadoop_etc_dir }}
export HADOOP_LOG_DIR={{ yarn_log_dir }}
# make sure to have the latest/active hadoop version at the start of the path to rpevent accidentally
# using older hadoop version when upgrading.
export PATH={{ stack_root }}/hadoop-latest/bin:{{ stack_root }}/hadoop-latest/sbin:$PATH:
export SPARK_HOME={{ stack_root }}/apache-spark-latest

HADOOP_CLASSPATH="{{ stack_root }}/apache-spark-latest/yarn/spark-{{ version.spark }}-yarn-shuffle.jar:$HADOOP_CLASSPATH"
{% if version.hadoop | float < 3.2 %}
# need newer version of metrics-core for lastest spark version
HADOOP_CLASSPATH="{{ stack_root }}/hadoop-latest/share/hadoop/yarn/lib/metrics-core-{{ version.spark_metrics }}.jar:$HADOOP_CLASSPATH"
{% endif %}

export HADOOP_CLASSPATH

# make sure the above classes are found first
export HADOOP_USER_CLASSPATH_FIRST=true

# Specify the JVM options to be used when starting the ResourceManager.
# These options will be appended to the options specified as HADOOP_OPTS
# and therefore may override any similar flags set in HADOOP_OPTS
#
# Examples for a Sun/Oracle JDK:
# a) override the appsummary log file:
# export YARN_RESOURCEMANAGER_OPTS="-Dyarn.server.resourcemanager.appsummary.log.file=rm-appsummary.log -Dyarn.server.resourcemanager.appsummary.logger=INFO,RMSUMMARY"
#
# b) Set JMX options
# export YARN_RESOURCEMANAGER_OPTS="-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.port=1026"
#
# c) Set garbage collection logs from hadoop-env.sh
# export YARN_RESOURCE_MANAGER_OPTS="${HADOOP_GC_SETTINGS} -Xloggc:${HADOOP_LOG_DIR}/gc-rm.log-$(date +'%Y%m%d%H%M')"
#
# d) ... or set them directly
# export YARN_RESOURCEMANAGER_OPTS="-verbose:gc -XX:+PrintGCDetails -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps -Xloggc:${HADOOP_LOG_DIR}/gc-rm.log-$(date +'%Y%m%d%H%M')"
#
# e) Enable ResourceManager audit logging
# export YARN_RESOURCEMANAGER_OPTS="-Drm.audit.logger=INFO,RMAUDIT"
#
#
# export YARN_RESOURCEMANAGER_OPTS=

YARN_RESOURCEMANAGER_OPTS="-Xms{{ yarn_heap.resourcemanager }} -Xmx{{ yarn_heap.resourcemanager }}"
YARN_RESOURCEMANAGER_OPTS+=" -Djava.net.preferIPv4Stack=true $YARN_RESOURCEMANAGER_OPTS"
YARN_RESOURCEMANAGER_OPTS+=" -javaagent:$HADOOP_HOME/lib/prometheus-exporter-latest.jar={{ hadoop_prometheus_port.yarn_resource_manager }}:{{ hadoop_etc_dir }}/prometheus-config.yml" 
export YARN_RESOURCEMANAGER_OPTS

###
# Node Manager specific parameters
###

# Specify the max heapsize for the NodeManager.  If no units are
# given, it will be assumed to be in MB.
# This value will be overridden by an Xmx setting specified in either
# HADOOP_OPTS and/or YARN_NODEMANAGER_OPTS.
# Default is the same as HADOOP_HEAPSIZE_MAX.
#export YARN_NODEMANAGER_HEAPSIZE=

# Specify the JVM options to be used when starting the NodeManager.
# These options will be appended to the options specified as HADOOP_OPTS
# and therefore may override any similar flags set in HADOOP_OPTS
#
# a) Enable NodeManager audit logging
# export YARN_NODEMANAGER_OPTS="-Dnm.audit.logger=INFO,NMAUDIT"
#
# See ResourceManager for some examples
#
#export YARN_NODEMANAGER_OPTS=

YARN_NODEMANAGER_OPTS="-Xms{{ yarn_heap.nodemanager }} -Xmx{{ yarn_heap.nodemanager }}"
YARN_NODEMANAGER_OPTS+=" -javaagent:$HADOOP_HOME/lib/prometheus-exporter-latest.jar={{ hadoop_prometheus_port.yarn_node_manager }}:{{ hadoop_etc_dir }}/prometheus-config.yml" 
export YARN_NODEMANAGER_OPTS


###
# TimeLineServer specific parameters
###

# Specify the max heapsize for the timelineserver.  If no units are
# given, it will be assumed to be in MB.
# This value will be overridden by an Xmx setting specified in either
# HADOOP_OPTS and/or YARN_TIMELINESERVER_OPTS.
# Default is the same as HADOOP_HEAPSIZE_MAX.
#export YARN_TIMELINE_HEAPSIZE=

# Specify the JVM options to be used when starting the TimeLineServer.
# These options will be appended to the options specified as HADOOP_OPTS
# and therefore may override any similar flags set in HADOOP_OPTS
#
# See ResourceManager for some examples
#
#export YARN_TIMELINESERVER_OPTS=
YARN_TIMELINESERVER_OPTS="-Xms{{ yarn_heap.timelineserver }} -Xmx{{ yarn_heap.timelineserver }}"
YARN_TIMELINESERVER_OPTS+=" -javaagent:$HADOOP_HOME/lib/prometheus-exporter-latest.jar={{ hadoop_prometheus_port.yarn_timeline_server }}:{{ hadoop_etc_dir }}/prometheus-config.yml" 
export YARN_TIMELINESERVER_OPTS


# Specify the JVM options to be used when starting the proxy server.
# These options will be appended to the options specified as HADOOP_OPTS
# and therefore may override any similar flags set in HADOOP_OPTS
#
# See ResourceManager for some examples
#
#export YARN_PROXYSERVER_OPTS=

export YARN_PROXYSERVER_OPTS="-Xms{{ yarn_heap.proxyserver }} -Xmx{{ yarn_heap.proxyserver }}"

