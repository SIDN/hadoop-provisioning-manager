# Create a non-Kerberos proxy to allow prometheus to scrape
# metrics from kerberos protected services

- name: Install required python package(s) for RHEL
  ansible.builtin.package:
    name:
      - python3-requests-gssapi
    state: latest
  become: yes
  when: ansible_distribution == 'RedHat'
  
- name: Install required python package(s) for Ubuntu
  ansible.builtin.package:
    name:
      - python3-requests-kerberos
    state: latest
  become: yes
  when: ansible_distribution == 'Ubuntu'

- name: Copy Exporter
  ansible.builtin.copy:
    src: ../files/prometheus-exporter/prometheus-generic-exporter.py
    dest: "{{ stack_root }}/apache-impala-latest/bin/impala-prometheus-exporter.py"
    mode: '0664'
    owner: "{{ impala_os_user }}"
    group: "{{ impala_os_group }}"
  become: yes
    
- name: Create Proxy start scripts
  ansible.builtin.template:
    src: "../templates/start-prometheus-proxy.sh.j2"
    dest: "{{ stack_root }}/apache-impala-latest/bin/start-prometheus-proxy-{{ daemon.service }}.sh"
    mode: '0775'
    owner: "{{ impala_os_user }}"
    group: "{{ impala_os_group }}"
  loop:
    - { service: 'statestored', group: 'impala_statestore' }
    - { service: 'catalogd', group: 'impala_catalog' }
    - { service: 'impalad', group: 'impala' }
  loop_control:
    loop_var: daemon
  become: yes
  when: inventory_hostname in groups[daemon.group]
  
- name: Create Proxy kill scripts
  ansible.builtin.template:
    src: "../templates/prometheus_impala_proxy_kill.sh.j2"
    dest: "{{ stack_root }}/apache-impala-latest/bin/prometheus_impala_proxy_kill.sh"
    mode: '0775'
    owner: "{{ impala_os_user }}"
    group: "{{ impala_os_group }}"
  loop:
    - { service: 'statestored', group: 'impala_statestore' }
    - { service: 'catalogd', group: 'impala_catalog' }
    - { service: 'impalad', group: 'impala' }
  loop_control:
    loop_var: daemon
  become: yes
  when: inventory_hostname in groups[daemon.group]

- name: Create Prometheus systemd services
  ansible.builtin.template:
    src: ../templates/systemd_prometheus_impala_proxy_service.j2
    dest: /etc/systemd/system/impala_prometheus_proxy_{{ daemon.service }}.service
    mode: '0644'
  loop:
    - { service: 'statestored', group: 'impala_statestore' }
    - { service: 'catalogd', group: 'impala_catalog' }
    - { service: 'impalad', group: 'impala' }
  loop_control:
    loop_var: daemon
  become: yes
  when: inventory_hostname in groups[daemon.group]
     
- name: Create Prometheus systemd Proxy kill service and timer
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: /etc/systemd/system/{{ item.dst }}
    mode: '0644'
  loop:
    - { src: '../templates/systemd_prometheus_impala_proxy_kill_service.j2', dst: 'prometheus_impala_proxy_kill.service'}
    - { src: '../templates/prometheus_impala_proxy_kill_timer.j2', dst: 'prometheus_impala_proxy_kill.timer'}
  become: yes
  when: (inventory_hostname in groups['impala_statestore'])
         or (inventory_hostname in groups['impala_catalog'])
         or (inventory_hostname in groups['impala'])
  
# make sure monitoring proxies start after reboot
- name: Enable Prometheus systemd Proxy services
  ansible.builtin.systemd:
    name: impala_prometheus_proxy_{{ item.service }}
    enabled: yes
  become: yes
  loop:
    - { service: 'statestored', group: 'impala_statestore' }
    - { service: 'catalogd', group: 'impala_catalog' }
    - { service: 'impalad', group: 'impala' }
  when: inventory_hostname in groups[item.group]
  
- name: Enable Prometheus systemd Proxy kill timer
  ansible.builtin.systemd:
    name: prometheus_impala_proxy_kill.timer
    enabled: yes
  become: yes
  when: (inventory_hostname in groups['impala_statestore'])
         or (inventory_hostname in groups['impala_catalog'])
         or (inventory_hostname in groups['impala'])
    

  