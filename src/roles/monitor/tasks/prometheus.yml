- name: create Prometheus config directory
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ prometheus_etc_dir }}"
  become: yes

# prometheus data dir must be owned by nobody so docker container has access
- name: create Prometheus data directory
  file:
    path: "{{ item }}"
    state: directory
    owner: "65534"
    group: "65534"
  loop:
    - "{{ prometheus_data_dir }}"
  become: yes
  
- name: install required packages (RHEL)
  ansible.builtin.package:
    name:
      - httpd-tools
    state: latest
  become: yes
  when: ansible_distribution == 'RedHat'
  
  
- name: install required packages (Ubuntu)
  ansible.builtin.package:
    name:
      - apache2-utils
    state: latest
  become: yes
  when: ansible_distribution == 'Ubuntu'
  
# 
# Pull remote image to controller
# add a tag and push it to local docker registry
# from registry distribute to servers.
# - name: Check if Prometheus docker image already exists
#   shell: "docker images | grep {{ groups['manager'][0] }}:{{ docker_registry_port }}/prom/prometheus:v{{ version.prometheus }} | wc -l"
#   register: docker_img_exists
#   delegate_to: localhost
#   connection: local
#   become: yes
# 
# - name: Show Prometheus docker image already exists
#   ansible.builtin.debug:
#     msg: Prometheus image detect {{ docker_img_exists.stdout }}
#   delegate_to: localhost
#   connection: local
# 
  
- name: Check if Prometheus docker image already exists
  docker_image_info:
    name: "{{ groups['manager'][0] }}:{{ docker_registry_port }}/prom/prometheus:v{{ version.prometheus }}"
  register: docker_img_exists
  delegate_to: localhost
  connection: local
  become: yes

- name: Show Prometheus docker image already exists
  ansible.builtin.debug:
    msg: "Prometheus image detect: {{ docker_img_exists.images | length == 1 }}"
  delegate_to: localhost
  connection: local
  become: yes    
  
- name: Pull Prometheus server image to Manager
  shell: >
    docker login -u {{ docker_registry_user }} -p {{ docker_registry_password }} {{ groups['manager'][0] }}:{{ docker_registry_port }};
    docker pull prom/prometheus:v{{ version.prometheus }}
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.images | length == 0

- name: Tag Prometheus server docker image
  shell: > 
    docker image tag prom/prometheus:v{{ version.prometheus }} {{ groups['manager'][0] }}:{{ docker_registry_port }}/prom/prometheus:v{{ version.prometheus }}"
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.images | length == 0

- name: Push Prometheus server docker image to registry
  shell: >
    docker login -u {{ docker_registry_user }} -p {{ docker_registry_password }} {{ groups['manager'][0] }}:{{ docker_registry_port }};
    docker push {{ groups['manager'][0] }}:{{ docker_registry_port }}/prom/prometheus:v{{ version.prometheus }}
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.images | length == 0

- name: Pull Prometheus image to monitor server
  shell: >
    docker login -u {{ docker_registry_user }} -p {{ docker_registry_password }} {{ groups['manager'][0] }}:{{ docker_registry_port }};
    docker pull {{ groups['manager'][0] }}:{{ docker_registry_port }}/prom/prometheus:v{{ version.prometheus }}
  become: yes
  
- name: Create Prometheus systemd unit
  ansible.builtin.template:
    src: ../templates/systemd_prometheus_service.j2
    dest: /etc/systemd/system/prometheus.service
    mode: '0644'
  become: yes
  
# make sure monitoring restarts after reboot
- name: Enable Prometheus systemd service
  ansible.builtin.systemd:
    name: prometheus
    enabled: yes
  become: yes
  