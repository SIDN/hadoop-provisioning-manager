# - name: Check if Jupyterhub docker image already exists
#   shell: "docker images | grep {{ groups['manager'][0] }}:{{ docker_registry_port }}/jupyterhub.*{{ version.jupyterhub }} | wc -l"
#   register: docker_img_exists
#   delegate_to: localhost
#   connection: local
#   become: yes
# 
# - name: Show Jupyterhub docker image already exists
#   ansible.builtin.debug:
#     msg: Jupyterhub image detect {{ docker_img_exists.stdout }}
#   delegate_to: localhost
#   connection: local
#   become: yes
# 
# - name: Create docker build directory
#   file:
#     path: "{{ cache_root }}/jupyterhub"
#     state: directory
#   delegate_to: localhost
#   connection: local
  
- name: Create Dockerfile
  ansible.builtin.template:
    src: "{{ item }}"
    dest: "{{ cache_root }}/jupyterhub/{{ item | basename | replace('.j2','') }}"
    mode: '0644'
  loop:
    - ../templates/Dockerfile.j2
    - ../templates/requirements.txt.j2
    - ../templates/examples/impyla-example.ipynb.j2
    - ../templates/examples/pyspark-example.ipynb.j2
    - "{{ prov_cfg_dir }}/python/jupyterhub-user-requirements.txt"
  delegate_to: localhost
  connection: local

- name: Create Jupyterhub image on controller server
  community.docker.docker_image:
    build:
      path: "{{ cache_root }}/jupyterhub"
    name: "{{ groups['manager'][0] }}:{{ docker_registry_port }}/jupyterhub"
    tag: "{{ version.jupyterhub }}"
    push: yes
    source: build
    force_source: yes
  delegate_to: localhost
  connection: local
  become: yes
  #when: docker_img_exists.stdout | int == 0
  
- name: Deploy image to Jupyterhub server  
  community.docker.docker_image:
    name: "{{ groups['manager'][0] }}:{{ docker_registry_port }}/jupyterhub:{{ version.jupyterhub }}"
    source: pull
    force_source: yes

