- name: Add users to group docker
  user:
    name: "{{ item }}"
    groups: docker
    append: yes
  become: yes
  loop:
    - '{{ impala_os_user }}'
  
- name: Create scratch directories for Impalad
  file:
    path: "{{ item.split(':')[0] }}"
    state: directory
    owner: "{{ impala_os_user }}"
    group: "{{ impala_os_group }}"
    mode: '0755'
  loop: '{{ impalad_scratch_dirs }}'
  become: yes  
  when: inventory_hostname in groups['impala']
        and not (inventory_hostname in groups['gateway']) 

- name: create ranger policycache directory
  file:
    path: "{{ impala_etc_dir }}/policycache"
    state: directory
    owner: "{{ impala_os_user }}"
    group: "{{ impala_os_group }}"
    mode: '0755'
  become: yes

- name: Create Systemd services
  ansible.builtin.template:
    src: "../templates/systemd_service.j2"
    dest: "/etc/systemd/system/impala_{{ item.name }}.service"
    mode: '0664'
  loop:
    - { name: 'impalad', group_name: 'hadoop' }
    - { name: 'catalogd', group_name: 'impala_catalog' }
    - { name: 'statestored', group_name: 'impala_statestore' }
  become: yes
  when: (inventory_hostname in groups[item.group_name])
        and not (inventory_hostname in groups['gateway'])
        
  
- name: Systemctl Reload Daemons
  shell: systemctl daemon-reload
  become: yes  
  when: not (inventory_hostname in groups['gateway']) 

- name: create impala directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ impala_os_user }}"
    group: "{{ impala_os_group }}"
  loop:
    - "{{ impala_log_dir }}"
  become: yes

# create Docker images for Impala daemons
- name: Check if the Apache Impala src is already downloaded
  stat:
    path: "{{ download_root }}/apache-impala-ubuntu-{{ version.impala }}.tar.gz"
  register: stat_impala_src
  delegate_to: localhost
  connection: local
  
- name: Download Apache Impala
  get_url:
      url: "{{ item }}"
      dest: "{{ download_root }}/{{ item | basename }}"
  loop:
    - "{{ repository_url }}/impala/apache-impala-ubuntu-{{ version.impala }}.tar.gz"
  delegate_to: localhost
  connection: local
  when: not stat_impala_src.stat.exists
  
- name: Extract Impala 
  ansible.builtin.unarchive:
      src: "{{ download_root }}/apache-impala-ubuntu-{{ version.impala }}.tar.gz"
      creates: "{{ cache_root }}/apache-impala-ubuntu-{{ version.impala }}"
      dest: "{{ cache_root }}"
  delegate_to: localhost
  connection: local
  
- name: Create Container scripts
  ansible.builtin.template:
    src: "../templates/{{ item.src }}"
    dest: "{{ cache_root }}/apache-impala-ubuntu-{{ version.impala }}/{{ item.dst }}"
    mode: '{{ item.perm }}'
  loop:
    - { src: 'impala_Dockerfile.j2', dst: 'Dockerfile', perm: '0664'}
    - { src: 'impala-entrypoint.sh.j2', dst: 'entrypoint.sh', perm: '0755' }
  delegate_to: localhost
  connection: local
  
- name: Check if Impala docker image already exists
  docker_image_info:
    name: "{{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/impala:{{ version.impala }}"
  register: docker_img_exists
  delegate_to: localhost
  connection: local
  become: yes

- name: Show Impala docker image already exists
  ansible.builtin.debug:
    msg: "Impala image detect: {{ docker_img_exists.images | length == 1 }}"
  delegate_to: localhost
  connection: local
  become: yes    

- name: Create Docker image on controller server
  shell: >
    cd {{ cache_root }}/apache-impala-ubuntu-{{ version.impala }};
    docker build -t apache/impala:{{ version.impala }} .;
    docker image tag apache/impala:{{ version.impala }} {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/impala:{{ version.impala }};
  delegate_to: localhost
  connection: local
  become: yes 
  when: docker_img_exists.images | length == 0
    
- name: Push Impala docker image to registry
  shell: >
    docker push {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/impala:{{ version.impala }}
  delegate_to: localhost
  connection: local
  become: yes 
  when: docker_img_exists.images | length == 0

- name: Pull Impala image to host
  shell: >
    docker pull {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/impala:{{ version.impala }}
  become: yes 
    
- name: Create Container start script
  ansible.builtin.template:
    src: "../templates/{{ item }}"
    dest: "{{ stack_root }}/apache-impala-latest/bin/{{ item | replace('.j2','') }}"
    mode: '0755'
    owner: "{{ impala_os_user }}"
    group: "{{ impala_os_group }}"
  become: yes
  loop:
    - impala-start.sh.j2
    - impala-stop.sh.j2
 