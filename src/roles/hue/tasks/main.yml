- name: Create OS group
  ansible.builtin.group:
    name: "{{ hue_os_group }}"
    state: present
  become: yes
    
- name: Include Create OS user
  include_role:
    name: create-system-user
  vars:
    new_user: "{{ hue_os_user }}"
    new_group: "{{ hue_os_group }}"
  
- name: Create cfg directory
  file:
    path: "{{ hue_etc_dir }}"
    state: directory
    mode: '0755'
  become: yes
  
- name: Create Hue log directory
  file:
    path: "{{ hue_log_dir }}"
    state: directory
    owner: "{{ hue_os_user }}"
    group: "{{ hue_os_group }}"
    mode: '0777'
  become: yes
  
- name: Create Hue component directory
  file:
    path: "{{ stack_root }}/hue-{{ version.hue }}/bin"
    state: directory
    owner: "{{ hue_os_user }}"
    group: "{{ hue_os_group }}"
    mode: '0755'
  become: yes  

- name: Create symlink latest Hue version
  file:
      src: "{{ stack_root }}/hue-{{ version.hue }}"
      dest: "{{ stack_root }}/hue-latest"
      state: link
  become: yes
  
- name: Install package dependencies
  ansible.builtin.package:
    name:
      - wget
      - curl
      - python3-psycopg2
    state: latest
  become: yes

- name: Install required packages (RHEL)
  ansible.builtin.package:
    name:
      - libselinux-python3
    state: latest
  become: yes
  when: ansible_distribution == "RedHat"
  
- name: Install required packages (Ubuntu)
  ansible.builtin.package:
    name:
      - python3-selinux
    state: latest
  become: yes
  when: ansible_distribution == "Ubuntu"
  
- name: Execute templates
  ansible.builtin.template:
    src: "../templates/{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - { "src": "systemd_hue_service.j2", "dest": "/etc/systemd/system/hue.service"}
  become: yes
  
- name: Systemctl Reload Daemons
  command: "systemctl daemon-reload"
  become: yes
  
- name: "Add  user {{ hue_os_user }} to group docker"
  user:
    name: "{{ hue_os_user }}"
    groups: docker
    append: yes
  become: yes
  
- name: Add  user '{{ provision_user }}' to group docker
  user:
    name: '{{ provision_user }}'
    groups: docker
    append: yes
  become: yes


# build and modify docker image

#
# Pull remote Hue image to controller
# add a tag and push it to local docker registry
# from registry distribute to Hue servers.
- name: Check if Hue docker image already exists
  shell: >
    docker images | grep {{ groups['manager'][0] }}:{{ docker_registry_port }}/gethue/hue.*{{ version.hue }} | wc -l
  register: docker_img_exists
  delegate_to: localhost
  connection: local
  become: yes

- name: Show Hue docker image already exists
  ansible.builtin.debug:
    msg: Hue image detect {{ docker_img_exists.stdout }}
  delegate_to: localhost
  connection: local
  become: yes

- name: Pull Hue image to controller server
  command: "docker pull gethue/hue:{{ version.hue }}"
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.stdout | int == 0
  
# start docker comntainer so we can patch thrift
- name: Start Hue Docker container
  shell: >
    docker run -d --rm --name hue -p {{ hue_port }}:8888 gethue/hue:{{ version.hue }}
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.stdout | int == 0
  
# make sure Docker container has had time to start
# before updating the container
- name: Wait for Hue Docker container to become active
  wait_for:
    host: localhost
    port: '{{ hue_port }}'
    delay: 5
    timeout: 60
  delegate_to: localhost
  connection: local
  when: docker_img_exists.stdout | int == 0
  
# - name: Download THRIFT patch
#   get_url:
#       url: "{{ item }}"
#       dest: "{{ download_root }}/{{ item | basename }}"
#   loop:
#     - "https://raw.githubusercontent.com/cloudera/hue/master/desktop/core/ext-py/thrift-0.16.0/src/transport/TSocket.py"
#   delegate_to: localhost
#   connection: local
#   when: docker_img_exists.stdout | int == 0
  
# hue 4.11.0 has bug that causes thrift 0.16.0 to fail ssl connections to impala
# to fix this path thrift in image
# TODO: remove this when this is fixed default docker image
- name: Install THRIFT patch in Hue container
  community.docker.docker_container_exec:
    container: hue
    argv:
      - /bin/bash
      - "-c"
      - "cd /usr/share/hue/build/env/lib/python3.8/site-packages/thrift/transport && curl -o TSocket.py https://raw.githubusercontent.com/cloudera/hue/master/desktop/core/ext-py/thrift-0.16.0/src/transport/TSocket.py"
    user: hue
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.stdout | int == 0
  
- name: Commit Hue docker container changes
  command: docker commit hue gethue/hue:{{ version.hue }}
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.stdout | int == 0
  
- name: Stop Hue Docker container without Kerberos
  command: docker stop hue
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.stdout | int == 0
  
- name: Tag Hue docker image
  shell: >
    docker image tag gethue/hue:{{ version.hue  }} {{ groups['manager'][0] }}:{{ docker_registry_port }}/gethue/hue:{{ version.hue }}
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.stdout | int == 0

 # push img to docker registry  
- name: Push Hue docker image to registry
  shell: >
    docker push {{ groups['manager'][0] }}:{{ docker_registry_port }}/gethue/hue:{{ version.hue }}
  delegate_to: localhost
  connection: local
  become: yes
  when: docker_img_exists.stdout | int == 0
  
  
# use task below to deploy img when no modification is required.    
# - name: Pull image, tag and push to registry
#   community.docker.docker_image:
#     name: gethue/hue:{{ version.hue }}
#     repository: "{{ groups['manager'][0] }}:{{ docker_registry_port }}/gethue/hue"
#     tag: "{{ version.hue }}"
#     push: yes
#     source: pull
#   delegate_to: localhost
#   connection: local
#   become: yes

- name: Pull Hue image to Hue server
  shell: >
    docker pull {{ groups['manager'][0] }}:{{ docker_registry_port }}/gethue/hue:{{ version.hue }}
  become: yes
     
- name: Include create database task
  include_tasks: tasks/database.yml

- name: Create Container start script
  ansible.builtin.template:
    src: "../templates/{{ item }}"
    dest: "{{ stack_root }}/hue-latest/bin/{{ item | replace('.j2','') }}"
    mode: '0755'
  become: yes
  loop:
    - start-hue.sh.j2
    - stop-hue.sh.j2
