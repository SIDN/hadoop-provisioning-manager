- name: Create management node local directories
  file:
    path: "{{ item }}"
    state: directory
  loop:
    - "{{ download_root }}"
    - "{{ cache_root }}/conf"
    - "{{ cache_root }}/krb"
  
- name: Installing required Ansible packages
  shell: >
    ansible-galaxy collection install community.docker
  become: yes
  
- name: Install required packages
  ansible.builtin.package:
    name:
      - python3-psycopg2
    state: latest
  become: yes
  
# need to install apache2-utils/httpd-tools for the
# htpassword util to generate auth cfg for web interfaces
- name: Install required packages (Ubuntu)
  ansible.builtin.package:
    name:
      - apache2-utils
      - docker-compose
    state: latest
  become: yes
  when:  ansible_distribution == "Ubuntu"
  
- name: Install required packages (RHEL)
  ansible.builtin.package:
    name:
      - httpd-tools
      - docker-compose
    state: latest
  become: yes
  when:  ansible_distribution == "RedHat"

- name: Create Docker registry services
  ansible.builtin.template:
    src: "../templates/{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - { "src": "systemd_docker_reg_service.j2", "dest": "/etc/systemd/system/docker_reg.service"}
    - { "src": "systemd_docker_reg_ui_service.j2", "dest": "/etc/systemd/system/docker_reg_ui.service"}
  become: yes
  
- name: Create Docker registry configuration
  ansible.builtin.template:
    src: "../templates/{{ item.src }}"
    dest: "{{ item.dest }}"
  loop:
    - { "src": "docker-registry-config.yml.j2", "dest": "/etc/docker/registry.yml"}
    - { "src": "nginx-registry-ui.conf.j2", "dest": "/etc/docker/nginx-registry-ui.conf"}
  become: yes
  
- name: Pull Docker UI image to controller server
  command: docker pull joxit/docker-registry-ui:{{ version.docker_registry_ui }}
  delegate_to: localhost
  connection: local
  become: yes
  
- name: Systemctl Reload Daemons
  shell: systemctl daemon-reload
  become: yes
  
- name: Enable Docker registry service
  ansible.builtin.systemd:
    name: docker_reg
    enabled: yes
  become: yes

# - name: Add user '{{ provision_user }}' to group docker
#   user:
#     name: '{{ provision_user }}'
#     groups: docker
#     append: yes
#   become: yes
  
  # start docker and registry otherwise isnatlling other dockerized
  # components on cluster will fail.
  
- name: Start service Docker
  ansible.builtin.systemd:
    name: docker
    state: started
  become: yes
    
- name: Start Docker registry
  ansible.builtin.systemd:
    name: docker_reg
    state: started
  become: yes
  
# have ansible run in py3 venv on the manager node
# to make sure we are only using py3
- name: Create python venv directory
  file:
    path: "{{ py_env_dir }}"
    state: directory

- name: "Create python3 venv"
  shell: >
    python3 -m venv {{ py_env_dir }}/{{ py_env_name }}

- name: Upgrade pip
  shell: >
    {{ py_env_dir }}/{{ py_env_name }}/bin/pip3 install --upgrade pip
  become: yes    

- name: Install Python dependencies
  vars:
    venv: "{{ py_env_dir }}/{{ py_env_name }}"
  pip:
    name: "{{ item }}"
    virtualenv: "{{ venv }}"
  loop:
      - requests
      - docker==5.0.3
      #- psycopg2-binary

# before executing ansible scripts, this python env needs to be actived    
- name: Create symlink to python activation
  file:
    src: "{{ py_env_dir }}/{{ py_env_name }}/bin/activate"
    dest: /home/{{ provision_user }}/activate-python
    state: link
  become: yes  
  
 
  