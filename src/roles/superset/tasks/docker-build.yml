# Update the ss repo
- name: Check for Git repo
  ansible.builtin.stat:
    path: '{{ download_root }}/superset'
  delegate_to: localhost
  connection: local
  register: git_repo
  
- name: Fech Git repository
  shell: git clone {{ superset_download_url }} {{ download_root }}/superset
  delegate_to: localhost
  connection: local
  when: not git_repo.stat.exists

# build docker image with kerberos support
- name: Check if Superset docker image already exists
  shell: "docker images | grep {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/superset.*{{ version.superset }} | wc -l"
  register: docker_img_exists
  delegate_to: localhost
  connection: local
  become: yes
  
- name: Show Superset docker image already exists
  ansible.builtin.debug:
    msg: Superset image detect {{ docker_img_exists.stdout }}
  delegate_to: localhost
  connection: local
  become: yes
  
- name: Checkout Superset version
  shell: >
    cd {{ download_root }}/superset;
    git checkout {{ version.superset }};
  delegate_to: localhost
  connection: local
  when: docker_img_exists.stdout | int == 0

# make each line unique by echoing the match line.
# otherwise lineinfile will only insert the line once
- name: Add additional os packages
  ansible.builtin.lineinfile:
    path: '{{ download_root }}/superset/Dockerfile'
    insertbefore: '{{ item }}'
    line: 'RUN echo "match: {{ item}}" && apt-get update -y && DEBIAN_FRONTEND=noninteractive apt-get install krb5-user vim'
    state: present
  delegate_to: localhost
  connection: local
  loop:
    - 'RUN mkdir /app'
    - 'RUN mkdir .+PYTHONPATH.+'
  when: docker_img_exists.stdout | int == 0

- name: Add additional Python packages
  ansible.builtin.lineinfile:
    path: '{{ download_root }}/superset/requirements/base.in'
    line: '{{ item }}'
    state: present
  delegate_to: localhost
  connection: local
  loop:
    - kerberos
    - impyla
  when: docker_img_exists.stdout | int == 0
    
- name: Copy file with owner and permissions
  ansible.builtin.copy:
    src: '../templates/requirements-local.txt'
    dest: '{{ download_root }}/superset/docker/requirements-local.txt'
  delegate_to: localhost
  connection: local
  when: docker_img_exists.stdout | int == 0
  
- name: Create Superset image on controller server
  shell: >
    cd {{ download_root }}/superset;
    TAG={{ version.superset }} docker build -t apache/superset:{{ version.superset }} .
  delegate_to: localhost
  connection: local
  when: docker_img_exists.stdout | int == 0

- name: Tag Superset docker image
  shell: >
    docker image tag apache/superset:{{ version.superset }} {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/superset:{{ version.superset }}
  delegate_to: localhost
  connection: local
  when: docker_img_exists.stdout | int == 0

# deploy img to server  
- name: Push Superset docker image to registry
  shell: >
    docker push {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/superset:{{ version.superset }}
  delegate_to: localhost
  connection: local
  when: docker_img_exists.stdout | int == 0

- name: Pull Superset image to Superset server
  shell: >
    docker pull {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/superset:{{ version.superset }}

- name: Copy docker control scripts
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: '{{ stack_root }}/apache-superset-{{ version.superset }}/bin'
    mode: 'preserve'
  with_fileglob:
    - "{{ download_root }}/superset/docker/*"
  become: yes
  
- name: Add Kerberos KT renewer call to startup script
  ansible.builtin.blockinfile:
    path: '{{ stack_root }}/apache-superset-{{ version.superset }}/bin/docker-bootstrap.sh'
    insertbefore: '/usr/bin/run-server.sh'
    block: |
        # create keberos session for Impala database access
         kinit -kt $KRB_KEYTAB $KRB_PRINCIPAL
  become: yes
