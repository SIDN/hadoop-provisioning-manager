# Update the ss repo
- name: Check for Git repo
  ansible.builtin.stat:
    path: '{{ download_root }}/superset/requirements/base.in'
  delegate_to: localhost
  connection: local
  run_once: true
  register: git_repo
  
- name: Fech Git repository
  shell: >
    git clone {{ superset_download_url }} {{ download_root }}/superset
  delegate_to: localhost
  connection: local
  run_once: true
  when: not git_repo.stat.exists

# build docker image with kerberos support
# - name: Check if Superset docker image already exists
#   shell: "docker images | grep {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/superset.*{{ version.superset }} | wc -l"
#   register: docker_img_exists
#   delegate_to: localhost
#   connection: local
#   become: yes
# 
# - name: Show Superset docker image already exists
#   ansible.builtin.debug:
#     msg: Superset image detect {{ docker_img_exists.stdout }}
#   delegate_to: localhost
#   connection: local
#   become: yes
  
- name: Check if Superset docker image already exists
  docker_image_info:
    name: "{{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/superset:{{ version.superset }}"
  register: docker_img_exists
  delegate_to: localhost
  connection: local
  run_once: true
  become: yes

- name: Show Superset docker image already exists
  ansible.builtin.debug:
    msg: "Superset image detect: {{ docker_img_exists.images | length == 1 }}"
  delegate_to: localhost
  connection: local
  run_once: true
  become: yes    
  
# 
- name: Checkout Superset version
  shell: >
    cd {{ download_root }}/superset;
    git pull;
    git checkout {{ version.superset }};
  delegate_to: localhost
  connection: local
  run_once: true
  when: docker_img_exists.images | length == 0

- name: Add additional os packages
  ansible.builtin.lineinfile:
    path: '{{ download_root }}/superset/Dockerfile'
    insertbefore: '.*{{ item }}.*'
    line: 'krb5-user \'
    state: present
  delegate_to: localhost
  connection: local
  run_once: true
  loop:
    - libsasl2-modules-gssapi-mit
    - libxtst6
  when: docker_img_exists.images | length == 0

- name: Add additional Python packages
  ansible.builtin.lineinfile:
    path: '{{ download_root }}/superset/requirements/base.in'
    line: '{{ item }}'
    state: present
  delegate_to: localhost
  connection: local
  run_once: true
  loop:
    - kerberos
    - impyla
  when: docker_img_exists.images | length == 0
    
- name: Copy file with owner and permissions
  ansible.builtin.copy:
    src: '../templates/requirements-local.txt'
    dest: '{{ download_root }}/superset/docker/requirements-local.txt'
  delegate_to: localhost
  connection: local
  run_once: true
  when: docker_img_exists.images | length == 0
  
- name: Create Superset image on controller server
  shell: >
    cd {{ download_root }}/superset;
    TAG={{ version.superset }} docker build -t apache/superset:{{ version.superset }} .
  delegate_to: localhost
  connection: local
  run_once: true
  when: docker_img_exists.images | length == 0

- name: Tag Superset docker image
  shell: >
    docker image tag apache/superset:{{ version.superset }} {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/superset:{{ version.superset }}
  delegate_to: localhost
  connection: local
  run_once: true
  when: docker_img_exists.images | length == 0

# deploy img to server  
- name: Push Superset docker image to registry
  shell: >
    docker login -u {{ docker_registry_user }} -p {{ docker_registry_password }} {{ groups['manager'][0] }}:{{ docker_registry_port }};
    docker push {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/superset:{{ version.superset }}
  delegate_to: localhost
  connection: local
  run_once: true
  #when: docker_img_exists.images | length == 0

- name: Pull Superset image to Superset server
  shell: >
    docker login -u {{ docker_registry_user }} -p {{ docker_registry_password }} {{ groups['manager'][0] }}:{{ docker_registry_port }};
    docker pull {{ groups['manager'][0] }}:{{ docker_registry_port }}/apache/superset:{{ version.superset }};
    docker system prune -f
  become: yes

- name: Copy docker control scripts
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: '{{ stack_root }}/apache-superset-{{ version.superset }}/bin'
    mode: 'preserve'
  with_fileglob:
    - "{{ download_root }}/superset/docker/*"
  become: yes
  
- name: Add Kerberos KT renewer call to startup script
  ansible.builtin.blockinfile:
    path: '{{ stack_root }}/apache-superset-{{ version.superset }}/bin/docker-bootstrap.sh'
    insertbefore: '/usr/bin/run-server.sh'
    block: |
        # create keberos session for Impala database access
         kinit -kt $KRB_KEYTAB $KRB_PRINCIPAL
  become: yes
